Good Read: https://medium.com/@madhankumaravelu93/low-level-system-design-parking-lot-design-part-i-7567d510da1d

Understanding requirements:
Let’s take a look at the system requirements for creating a Parking lot system.

- The parking lot should have multiple floors where customers can park their cars.
- The parking lot should have multiple entry and exit points.
- Customers can collect a parking ticket from the entry points and can pay the parking fee at the exit points to the parking attendant or automated exit panel
- Customers can pay via both cash and credit cards.
- The system should not allow more vehicles than the maximum capacity of the parking lot. If the parking is full, the system should be able to show a message at the entrance panel and on the parking display board on the ground floor.
- Each parking floor will have many parking spots. The system should support multiple types of parking spots such as Compact, Large, Disabled, Motorcycle, etc.
- The system should support parking for different types of vehicles like car, truck, van, motorcycle, etc.
- Each parking floor should have a display board showing any free parking spot for each spot type.
- The system should support a per-hour parking fee model. For example, customers have to pay some amount based on the Vehicle type.
- Admins should be able to add parking floors and parking spot.


How to approach the problem statement ?
The next step is to convert those requirements into design diagrams to get a better understanding of the system we are going to develop. A UML diagram is a way of visualising a software program using a collection of diagrams.

- Top-down approach — The major focus is on breaking the bigger problem into smaller ones and then repeating the process with each problem.
- Bottom-up approach —Primarily focuses on identifying and resolving the smallest problems and then integrating them together to solve the bigger problem



UML Diagram Drive link

- https://drive.google.com/drive/search?q=mukunda
